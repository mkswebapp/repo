
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;

using DemoWebAPI.DB;


namespace DemoWebAPI.Repository
{
    public class Disposable : IDisposable
    {
        private bool isDisposed;

        ~Disposable()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        private void Dispose(bool disposing)
        {
            if (!isDisposed && disposing)
            {
                DisposeCore();
            }

            isDisposed = true;
        }

        protected virtual void DisposeCore()
        {
        }
    }

   public interface IDatabaseFactory : IDisposable
    {
        DemoWebAPIContext Get();
    }

	public class DatabaseFactory : Disposable, IDatabaseFactory
    {
        private DemoWebAPIContext dataContext;
        public DemoWebAPIContext Get()
        {
            return dataContext ?? (dataContext = new DemoWebAPIContext());
        }
        protected override void DisposeCore()
        {
            if (dataContext != null)
                dataContext.Dispose();
        }
    }

    public interface IRepository<T> where T : class
    {    
        #region    Methods
    

	    void Add(T entity);
        void Update(T entity);
        void Delete(T entity);
        void Delete(Expression<Func<T, bool>> where);
        T GetById(long Id);
        T GetById(string Id);
        T Get(Expression<Func<T, bool>> where);
        IEnumerable<T> GetAll();
        IEnumerable<T> GetMany(Expression<Func<T, bool>> where);
 
        
        #endregion
    }
    
    public abstract class Repository<T> : IRepository<T>
                                  where T : class
    {
        #region Members
  private DemoWebAPIContext dataContext;
        private readonly IDbSet<T> dbset;
        protected Repository(IDatabaseFactory databaseFactory)
        {
            DatabaseFactory = databaseFactory;
            dbset = DataContext.Set<T>();
        }

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }
        public virtual void Add(T entity)
        {
            dbset.Add(entity);
        }
        public virtual void Update(T entity)
        {
            dbset.Attach(entity);
            dataContext.Entry(entity).State = EntityState.Modified;
        }
        public virtual void Delete(T entity)
        {
            dbset.Remove(entity);
        }
        public virtual void Delete(Expression<Func<T, bool>> where)
        {
            IEnumerable<T> objects = dbset.Where<T>(where).AsEnumerable();
            foreach (T obj in objects)
                dbset.Remove(obj);
        }
        public virtual T GetById(long id)
        {
            return dbset.Find(id);
        }

		 public virtual T GetById(int id)
        {
            return dbset.Find(id);
        }
        public virtual T GetById(string id)
        {
            return dbset.Find(id);
        }
        public virtual IEnumerable<T> GetAll()
        {
            return dbset.ToList();
        }
        public virtual IEnumerable<T> GetMany(Expression<Func<T, bool>> where)
        {
            return dbset.Where(where).ToList();
        }
        public T Get(Expression<Func<T, bool>> where)
        {
            return dbset.Where(where).FirstOrDefault<T>();
        }
 
        #endregion
      }
 
    
    public partial class AddressRepository : 
		Repository<Address>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public AddressRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class BuildVersionRepository : 
		Repository<BuildVersion>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public BuildVersionRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class CustomerRepository : 
		Repository<Customer>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public CustomerRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class CustomerAddressRepository : 
		Repository<CustomerAddress>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public CustomerAddressRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ErrorLogRepository : 
		Repository<ErrorLog>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ErrorLogRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ProductRepository : 
		Repository<Product>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ProductRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ProductCategoryRepository : 
		Repository<ProductCategory>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ProductCategoryRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ProductDescriptionRepository : 
		Repository<ProductDescription>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ProductDescriptionRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ProductModelRepository : 
		Repository<ProductModel>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ProductModelRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class ProductModelProductDescriptionRepository : 
		Repository<ProductModelProductDescription>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public ProductModelProductDescriptionRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class SalesOrderDetailRepository : 
		Repository<SalesOrderDetail>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public SalesOrderDetailRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
    
    public partial class SalesOrderHeaderRepository : 
		Repository<SalesOrderHeader>
    {
        #region Ctor
 
 
        #endregion
 
 private DemoWebAPIContext dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public SalesOrderHeaderRepository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
        
  public interface IUnitOfWork
  {
      #region    Methods
    
            IRepository<ErrorLog> 
		ErrorLogs { get; }   
            IRepository<Address> 
		Addresses { get; }   
            IRepository<Customer> 
		Customers { get; }   
            IRepository<CustomerAddress> 
		CustomerAddresses { get; }   
            IRepository<Product> 
		Products { get; }   
            IRepository<ProductCategory> 
		ProductCategories { get; }   
            IRepository<ProductDescription> 
		ProductDescriptions { get; }   
            IRepository<ProductModel> 
		ProductModels { get; }   
            IRepository<ProductModelProductDescription> 
		ProductModelProductDescriptions { get; }   
            IRepository<SalesOrderDetail> 
		SalesOrderDetails { get; }   
            IRepository<SalesOrderHeader> 
		SalesOrderHeaders { get; }   
            IRepository<BuildVersion> 
		BuildVersions { get; }   
        void Commit();
    
    #endregion
  }
 
  public partial class UnitOfWork : IUnitOfWork
  {

        private readonly IDatabaseFactory databaseFactory;
        private DemoWebAPIContext dataContext;

        public UnitOfWork(IDatabaseFactory databaseFactory)
        {
            this.databaseFactory = databaseFactory;
        }

        protected DemoWebAPIContext DataContext
        {
            get { return dataContext ?? (dataContext = databaseFactory.Get()); }
        }

    #region Members
 
        private ErrorLogRepository _errorlogs;
        private AddressRepository _addresses;
        private CustomerRepository _customers;
        private CustomerAddressRepository _customeraddresses;
        private ProductRepository _products;
        private ProductCategoryRepository _productcategories;
        private ProductDescriptionRepository _productdescriptions;
        private ProductModelRepository _productmodels;
        private ProductModelProductDescriptionRepository _productmodelproductdescriptions;
        private SalesOrderDetailRepository _salesorderdetails;
        private SalesOrderHeaderRepository _salesorderheaders;
        private BuildVersionRepository _buildversions;
        
    #endregion
 
    #region Ctor
 
  
 
    #endregion
 
    #region IUnitOfWork Members
 
        public IRepository<ErrorLog> ErrorLogs
    {
        get
        {
            if (_errorlogs == null)
            {
                _errorlogs = new ErrorLogRepository(this.databaseFactory);
            }
            return _errorlogs;
        }
    }
        public IRepository<Address> Addresses
    {
        get
        {
            if (_addresses == null)
            {
                _addresses = new AddressRepository(this.databaseFactory);
            }
            return _addresses;
        }
    }
        public IRepository<Customer> Customers
    {
        get
        {
            if (_customers == null)
            {
                _customers = new CustomerRepository(this.databaseFactory);
            }
            return _customers;
        }
    }
        public IRepository<CustomerAddress> CustomerAddresses
    {
        get
        {
            if (_customeraddresses == null)
            {
                _customeraddresses = new CustomerAddressRepository(this.databaseFactory);
            }
            return _customeraddresses;
        }
    }
        public IRepository<Product> Products
    {
        get
        {
            if (_products == null)
            {
                _products = new ProductRepository(this.databaseFactory);
            }
            return _products;
        }
    }
        public IRepository<ProductCategory> ProductCategories
    {
        get
        {
            if (_productcategories == null)
            {
                _productcategories = new ProductCategoryRepository(this.databaseFactory);
            }
            return _productcategories;
        }
    }
        public IRepository<ProductDescription> ProductDescriptions
    {
        get
        {
            if (_productdescriptions == null)
            {
                _productdescriptions = new ProductDescriptionRepository(this.databaseFactory);
            }
            return _productdescriptions;
        }
    }
        public IRepository<ProductModel> ProductModels
    {
        get
        {
            if (_productmodels == null)
            {
                _productmodels = new ProductModelRepository(this.databaseFactory);
            }
            return _productmodels;
        }
    }
        public IRepository<ProductModelProductDescription> ProductModelProductDescriptions
    {
        get
        {
            if (_productmodelproductdescriptions == null)
            {
                _productmodelproductdescriptions = new ProductModelProductDescriptionRepository(this.databaseFactory);
            }
            return _productmodelproductdescriptions;
        }
    }
        public IRepository<SalesOrderDetail> SalesOrderDetails
    {
        get
        {
            if (_salesorderdetails == null)
            {
                _salesorderdetails = new SalesOrderDetailRepository(this.databaseFactory);
            }
            return _salesorderdetails;
        }
    }
        public IRepository<SalesOrderHeader> SalesOrderHeaders
    {
        get
        {
            if (_salesorderheaders == null)
            {
                _salesorderheaders = new SalesOrderHeaderRepository(this.databaseFactory);
            }
            return _salesorderheaders;
        }
    }
        public IRepository<BuildVersion> BuildVersions
    {
        get
        {
            if (_buildversions == null)
            {
                _buildversions = new BuildVersionRepository(this.databaseFactory);
            }
            return _buildversions;
        }
    }
        
    
    public void Commit()
    {
      dataContext.SaveChanges();
    }
 
    #endregion
  }
}
