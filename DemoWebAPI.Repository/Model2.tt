<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="C:\Users\administrator.SPD\Documents\visual studio 2013\Projects\DemoWebAPI\DemoWebAPI.Repository\bin\Debug\DemoWebAPI.DB.Dll" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#  
    const string inputFile = @"c:\users\administrator.spd\documents\visual studio 2013\Projects\DemoWebAPI\DemoWebAPI.DB\AdventureWorksModel.edmx";
    const string inputFileq= @"C:\";
    if(Errors.HasErrors)
    {
        return String.Empty;
    }
    CodeGenerationTools code = new CodeGenerationTools(this)
        {FullyQualifySystemTypes = true, CamelCaseFields = false};
    MetadataLoader loader = new MetadataLoader(this);
    string open = "<";
    string close = ">";
    string SourceCsdlPath = FindEDMXFileName();
    ReferenceCsdlPaths = new string[] {};
    string namespaceName = code.VsNamespaceSuggestion();
ItemCollection = loader.CreateEdmItemCollection
        (SourceCsdlPath, ReferenceCsdlPaths.ToArray());
    EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;

using DemoWebAPI.DB;


namespace <#=        namespaceName#>
{
    public class Disposable : IDisposable
    {
        private bool isDisposed;

        ~Disposable()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        private void Dispose(bool disposing)
        {
            if (!isDisposed && disposing)
            {
                DisposeCore();
            }

            isDisposed = true;
        }

        protected virtual void DisposeCore()
        {
        }
    }

   public interface IDatabaseFactory : IDisposable
    {
        <#=        code.Escape(container)#> Get();
    }

	public class DatabaseFactory : Disposable, IDatabaseFactory
    {
        private <#=        code.Escape(container)#> dataContext;
        public <#=        code.Escape(container)#> Get()
        {
            return dataContext ?? (dataContext = new <#=        code.Escape(container)#>());
        }
        protected override void DisposeCore()
        {
            if (dataContext != null)
                dataContext.Dispose();
        }
    }

    public interface IRepository<T> where T : class
    {    
        #region    Methods
    

	    void Add(T entity);
        void Update(T entity);
        void Delete(T entity);
        void Delete(Expression<Func<T, bool>> where);
        T GetById(long Id);
        T GetById(string Id);
        T Get(Expression<Func<T, bool>> where);
        IEnumerable<T> GetAll();
        IEnumerable<T> GetMany(Expression<Func<T, bool>> where);
 
        
        #endregion
    }
    
    public abstract class Repository<T> : IRepository<T>
                                  where T : class
    {
        #region Members
  private <#=        code.Escape(container)#> dataContext;
        private readonly IDbSet<T> dbset;
        protected Repository(IDatabaseFactory databaseFactory)
        {
            DatabaseFactory = databaseFactory;
            dbset = DataContext.Set<T>();
        }

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        protected <#=        code.Escape(container)#> DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }
        public virtual void Add(T entity)
        {
            dbset.Add(entity);
        }
        public virtual void Update(T entity)
        {
            dbset.Attach(entity);
            dataContext.Entry(entity).State = EntityState.Modified;
        }
        public virtual void Delete(T entity)
        {
            dbset.Remove(entity);
        }
        public virtual void Delete(Expression<Func<T, bool>> where)
        {
            IEnumerable<T> objects = dbset.Where<T>(where).AsEnumerable();
            foreach (T obj in objects)
                dbset.Remove(obj);
        }
        public virtual T GetById(long id)
        {
            return dbset.Find(id);
        }

		 public virtual T GetById(int id)
        {
            return dbset.Find(id);
        }
        public virtual T GetById(string id)
        {
            return dbset.Find(id);
        }
        public virtual IEnumerable<T> GetAll()
        {
            return dbset.ToList();
        }
        public virtual IEnumerable<T> GetMany(Expression<Func<T, bool>> where)
        {
            return dbset.Where(where).ToList();
        }
        public T Get(Expression<Func<T, bool>> where)
        {
            return dbset.Where(where).FirstOrDefault<T>();
        }
 
        #endregion
      }
 
<#
    foreach (EntityType entity in 
        ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {        
#>
    
    public partial class <#=            entity.Name #>Repository : 
		Repository<#=            open#><#=            entity.Name#><#=            close#>
    {
        #region Ctor
 
 
        #endregion
 
 private <#=            code.Escape(container)#> dataContext;

        protected IDatabaseFactory DatabaseFactory
        {
            get;
            private set;
        }

        public <#=            entity.Name #>Repository(IDatabaseFactory databaseFactory)
            : base(databaseFactory)
        {
            DatabaseFactory = databaseFactory;
        }

        protected <#=            code.Escape(container)#> DataContext
        {
            get { return dataContext ?? (dataContext = DatabaseFactory.Get()); }
        }



        #region Methods
 
 
        #endregion        
    }
<# 
    }        
#>
        
  public interface IUnitOfWork
  {
      #region    Methods
    
    <#
    foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
    {    
    #>
        IRepository<#=            open #><#=            set.ElementType.Name #><#=            close #> 
		<#=            set.Name #> { get; }   
    <# 
    }
    #>
    void Commit();
    
    #endregion
  }
 
  public partial class UnitOfWork : IUnitOfWork
  {

        private readonly IDatabaseFactory databaseFactory;
        private <#=        code.Escape(container)#> dataContext;

        public UnitOfWork(IDatabaseFactory databaseFactory)
        {
            this.databaseFactory = databaseFactory;
        }

        protected <#=        code.Escape(container)#> DataContext
        {
            get { return dataContext ?? (dataContext = databaseFactory.Get()); }
        }

    #region Members
 
    <#
    foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
    {    
    #>
    private <#=            set.ElementType.Name #>Repository _<#=            set.Name.ToLower() #>;
    <# 
    }
    #>    
    #endregion
 
    #region Ctor
 
  
 
    #endregion
 
    #region IUnitOfWork Members
 
    <#
    foreach (EntitySet set in container.BaseEntitySets.OfType<EntitySet>())
    {    
    #>
    public IRepository<#=            open #><#=            set.ElementType.Name #><#=            close #> <#=            set.Name #>
    {
        get
        {
            if (_<#=            set.Name.ToLower() #> == null)
            {
                _<#=            set.Name.ToLower() #> = new <#= 
            set.ElementType.Name #>Repository(this.databaseFactory);
            }
            return _<#=            set.Name.ToLower() #>;
        }
    }
    <# 
    }
    #>    
    
    public void Commit()
    {
      dataContext.SaveChanges();
    }
 
    #endregion
  }
}
<#+
public string SourceCsdlPath{ get; set; }
public EdmItemCollection ItemCollection{ get; set; }
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
 //const string inputFile = @"C:\WorkArea\Projects\PocWebAPI_2012\Application\Application.DB\AdventureWorks.edmx";
   const string inputFile = @"c:\users\administrator.spd\documents\visual studio 2013\Projects\DemoWebAPI\DemoWebAPI.DB\AdventureWorksModel.edmx";

string FindEDMXFileName()
{            
    string[] entityFrameworkFiles = Directory.GetFiles
		(Host.ResolvePath(string.Empty), "*.edmx");
    if(entityFrameworkFiles.Length > 0)
    {
        return entityFrameworkFiles[0];
    }
    
    return inputFile;// string.Empty;
}
#>